version: '3'

tasks:
  default:
    desc: List all available tasks
    silent: true
    cmds:
      - task --list

  vendor:
    desc: Run go mod vendor
    silent: true
    cmds:
      - go mod tidy
      - go mod vendor

  test:
    desc: Run unit tests with coverage
    silent: true
    cmds:
      - mkdir -p output
      - go test -race -count=1 -coverprofile=output/coverage.out -covermode=atomic ./... -tags=!examples
      - go tool cover -html=output/coverage.out -o output/coverage.html
      - 'echo "‚úì Coverage: output/coverage.html"'

  test:integration:
    desc: Run integration tests including temporal (testcontainers, Docker required)
    silent: true
    cmds:
      - mkdir -p output
      - go list ./... | grep -v examples | xargs go test -race -count=1 -coverprofile=output/coverage-integration.out -covermode=atomic -tags=integration -timeout=15m
      - go tool cover -html=output/coverage-integration.out -o output/coverage-integration.html
      - 'echo "‚úì Integration coverage: output/coverage-integration.html"'

  test:argo:
    desc: Run Argo integration tests (requires k8s cluster with Argo Workflows)
    silent: true
    cmds:
      - task: argo:check
      - mkdir -p output
      - go test -race -count=1 -coverprofile=output/coverage-argo.out -covermode=atomic -tags=argo -timeout=15m ./argo/...
      - go tool cover -html=output/coverage-argo.out -o output/coverage-argo.html
      - 'echo "‚úì Argo coverage: output/coverage-argo.html"'
      - go tool cover -func=output/coverage-argo.out | grep total

  test:complete:
    desc: Run ALL tests (unit + integration + argo) with single comprehensive coverage report
    silent: true
    cmds:
      - task: docker:check
      - task: argo:check
      - mkdir -p output
      - echo "üß™ Running all tests (unit + integration + argo)..."
      - go list ./... | grep -v examples | xargs go test -race -count=1 -coverprofile=output/coverage-complete.out -covermode=atomic -tags=integration,argo -timeout=20m -v
      - go tool cover -html=output/coverage-complete.out -o output/coverage-complete.html
      - 'echo ""'
      - 'echo "‚úÖ Complete test coverage report:"'
      - go tool cover -func=output/coverage-complete.out | grep total
      - 'echo "üìÑ HTML Report: output/coverage-complete.html"'
      - 'echo "üìÑ Coverage Data: output/coverage-complete.out"'

  docker:check:
    desc: Check Docker availability and daemon status
    silent: true
    cmds:
      - |
        if ! command -v docker &> /dev/null; then
          echo "‚ùå Docker not installed"
          exit 1
        fi
        if ! docker ps &> /dev/null; then
          echo "‚ùå Docker daemon not running"
          echo "   Start Docker and try again"
          exit 1
        fi
        echo "‚úÖ Docker is available and running"
        docker --version

  lint:
    desc: Run golangci-lint
    silent: true
    cmds:
      - golangci-lint run ./...

  check:
    desc: Run all checks (test + lint)
    silent: true
    cmds:
      - task: test
      - task: lint

  temporal:start:
    desc: Start Temporal dev server for manual testing (tests use testcontainers)
    cmds:
      - mkdir -p .temporal
      - |
        if pgrep -f "temporal server start-dev" > /dev/null; then
          echo "‚úì Temporal server already running"
        else
          echo "Starting Temporal server in background..."
          echo "Note: Temporal tests use testcontainers and don't need this server"
          nohup temporal server start-dev --db-filename .temporal/temporal.db > .temporal/temporal.log 2>&1 &
          sleep 2
          echo "‚úì Temporal server started"
          echo "  UI: http://localhost:8233"
          echo "  gRPC: localhost:7233"
          echo "  Logs: .temporal/temporal.log"
        fi

  temporal:stop:
    desc: Stop Temporal dev server
    cmds:
      - |
        if pgrep -f "temporal server start-dev" > /dev/null; then
          pkill -f "temporal server start-dev"
          echo "‚úì Temporal server stopped"
        else
          echo "‚úì Temporal server not running"
        fi

  temporal:status:
    desc: Check Temporal dev server status
    cmds:
      - |
        if pgrep -f "temporal server start-dev" > /dev/null; then
          echo "‚úÖ Temporal server is running"
          echo "   UI: http://localhost:8233"
          echo "   gRPC: localhost:7233"
          echo "   Logs: .temporal/temporal.log"
        else
          echo "‚ùå Temporal server not running"
          echo "   Note: Tests use testcontainers and don't need this"
          echo "   For manual testing: task temporal:start"
        fi

  temporal:logs:
    desc: Show Temporal dev server logs
    cmds:
      - |
        if [ -f .temporal/temporal.log ]; then
          tail -f .temporal/temporal.log
        else
          echo "‚ùå Log file not found (.temporal/temporal.log)"
          echo "   For manual testing: task temporal:start"
        fi

  # Infrastructure checks
  k8s:check:
    desc: Check Kubernetes cluster availability
    silent: true
    cmds:
      - |
        if ! command -v kubectl &> /dev/null; then
          echo "‚ùå kubectl not installed"
          exit 1
        fi
        if kubectl cluster-info &> /dev/null; then
          echo "‚úÖ Kubernetes cluster is available"
          kubectl cluster-info | head -2
          echo "   Context: $(kubectl config current-context)"
        else
          echo "‚ùå Kubernetes cluster not accessible"
          echo "   Check your kubeconfig or cluster status"
          exit 1
        fi

  argo:check:
    desc: Check Argo Workflows availability in cluster
    silent: true
    cmds:
      - |
        if ! command -v kubectl &> /dev/null; then
          echo "‚ùå kubectl not installed"
          exit 1
        fi
        if ! kubectl cluster-info &> /dev/null; then
          echo "‚ùå Kubernetes cluster not accessible"
          exit 1
        fi
        if kubectl get namespace argo &> /dev/null; then
          echo "‚úÖ Argo namespace exists"
          if kubectl get deployment -n argo 2> /dev/null | grep -q workflow-controller; then
            echo "‚úÖ Argo Workflows is installed"
            kubectl get pods -n argo -l app=workflow-controller --no-headers 2>/dev/null | head -1
          else
            echo "‚ö†Ô∏è  Argo namespace exists but Argo Workflows not detected"
          fi
        else
          echo "‚ùå Argo namespace not found"
          echo "   Install: kubectl create namespace argo"
          echo "   Then install Argo Workflows from https://argo-workflows.readthedocs.io"
          exit 1
        fi

  # Utilities
  tools:
    desc: Install development tools
    silent: true
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
      - go install mvdan.cc/gofumpt@latest
      - echo "‚úì Tools installed"

  fmt:
    desc: Format all Go files with gofumpt
    cmds:
      - gofumpt -l -w .

  clean:
    desc: Clean build artifacts
    silent: true
    cmds:
      - rm -rf dist output
