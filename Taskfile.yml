version: '3'

tasks:
  default:
    desc: List all available tasks
    silent: true
    cmds:
      - task --list

  test:
    desc: Run unit tests with coverage
    silent: true
    cmds:
      - mkdir -p output
      - go test -race -count=1 -coverprofile=output/coverage.out -covermode=atomic ./... -tags=!examples
      - go tool cover -html=output/coverage.out -o output/coverage.html
      - 'echo "✓ Coverage: output/coverage.html"'

  test:integration:
    desc: Run integration tests including temporal (testcontainers, Docker required)
    silent: true
    cmds:
      - mkdir -p output
      - go list ./... | grep -v examples | xargs go test -race -count=1 -coverprofile=output/coverage-integration.out -covermode=atomic -tags=integration -timeout=15m
      - go tool cover -html=output/coverage-integration.out -o output/coverage-integration.html
      - 'echo "✓ Integration coverage: output/coverage-integration.html"'

  test:all:
    desc: Run all tests with combined coverage (unit + integration, Docker required, excludes examples)
    silent: true
    cmds:
      - mkdir -p output
      - go list ./... | grep -v examples | xargs go test -race -count=1 -coverprofile=output/coverage-all.out -covermode=atomic -tags=integration -timeout=15m
      - go tool cover -html=output/coverage-all.out -o output/coverage-all.html
      - 'echo "✓ Complete coverage: output/coverage-all.html"'
      - go tool cover -func=output/coverage-all.out | grep total

  lint:
    desc: Run golangci-lint
    silent: true
    cmds:
      - golangci-lint run ./...

  check:
    desc: Run all checks (test + lint)
    silent: true
    cmds:
      - task: test
      - task: lint

  temporal:start:
    desc: Start Temporal dev server for manual testing (tests use testcontainers)
    cmds:
      - mkdir -p .temporal
      - |
        if pgrep -f "temporal server start-dev" > /dev/null; then
          echo "✓ Temporal server already running"
        else
          echo "Starting Temporal server in background..."
          echo "Note: Temporal tests use testcontainers and don't need this server"
          nohup temporal server start-dev --db-filename .temporal/temporal.db > .temporal/temporal.log 2>&1 &
          sleep 2
          echo "✓ Temporal server started"
          echo "  UI: http://localhost:8233"
          echo "  gRPC: localhost:7233"
          echo "  Logs: .temporal/temporal.log"
        fi

  temporal:stop:
    desc: Stop Temporal dev server
    cmds:
      - |
        if pgrep -f "temporal server start-dev" > /dev/null; then
          pkill -f "temporal server start-dev"
          echo "✓ Temporal server stopped"
        else
          echo "✓ Temporal server not running"
        fi

  temporal:status:
    desc: Check Temporal dev server status
    cmds:
      - |
        if pgrep -f "temporal server start-dev" > /dev/null; then
          echo "✅ Temporal server is running"
          echo "   UI: http://localhost:8233"
          echo "   gRPC: localhost:7233"
          echo "   Logs: .temporal/temporal.log"
        else
          echo "❌ Temporal server not running"
          echo "   Note: Tests use testcontainers and don't need this"
          echo "   For manual testing: task temporal:start"
        fi

  temporal:logs:
    desc: Show Temporal dev server logs
    cmds:
      - |
        if [ -f .temporal/temporal.log ]; then
          tail -f .temporal/temporal.log
        else
          echo "❌ Log file not found (.temporal/temporal.log)"
          echo "   For manual testing: task temporal:start"
        fi

  # Utilities
  tools:
    desc: Install development tools
    silent: true
    cmds:
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
      - go install mvdan.cc/gofumpt@latest
      - echo "✓ Tools installed"

  fmt:
    desc: Format all Go files with gofumpt
    cmds:
      - gofumpt -l -w .

  clean:
    desc: Clean build artifacts
    silent: true
    cmds:
      - rm -rf dist output
